server.port: 8081

spring:
  application:
    name: order-service
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/orders
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:root}
  kafka:
    topic: orders
    bootstrap-servers: ${KAFKA_BROKER_URL:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

jobs:
  publish-events:
    cron: '0 */1 * * * *'
    batch-size: 2

eureka.client.serviceUrl.defaultZone: http://${EUREKA_HOST:localhost}:${EUREKA_PORT:8761}/eureka
inventory.service.url: http://inventory-service

resilience4j:
  circuitbreaker:
    instances:
      inventoryClient:
        registerHealthIndicator: true
        automaticTransitionFromOpenToHalfOpenEnabled: true
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 3
        failureRateThreshold: 100
        waitDurationInOpenState: 3s
        permittedNumberOfCallsInHalfOpenState: 3
  retry:
    instances:
      inventoryClient:
        max-attempts: 3
        wait-duration: 3s

management:
  health:
    circuitbreakers:
      enabled: true
  endpoint:
    health:
      show-details: never
  endpoints:
    web:
      exposure:
        include: health

logging.level.net.javacrumbs.shedlock: DEBUG