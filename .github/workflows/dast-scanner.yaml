name: DAST Scanner

on:
  workflow_call:
    inputs:
      path:
        description: 'Path to the project directory'
        required: true
        type: string
      port:
        description: 'Port number of the service'
        required: true
        type: number
      dbName:
        description: 'Database name of the service'
        required: false
        type: string

jobs:
  dast-scanner:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: ${{ inputs.dbName }}
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      kafka:
        image: wurstmeister/kafka:latest
        ports:
          - 29092:29092
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:29092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

    steps:
      - name: Checkout to repo
        uses: actions/checkout@v4

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'
          cache: 'gradle'

      - name: Build the application
        run: cd ${{ inputs.path }} && ./gradlew clean build

      - name: Create log file
        run: |
          touch app.log
          chmod 777 app.log

      - name: Start the application
        run: cd ${{ inputs.path }} && ./gradlew bootRun > app.log 2>&1 &
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
          KAFKA_BROKER_URL: localhost:29092

      - name: List files in notification-service directory
        run: ls -R ${{ inputs.path }}

      - name: Show application logs
        run: tail -n 50 app.log || echo "No logs available"

      - name: Wait for application to be up
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:${{ inputs.port }}/actuator/health > /dev/null; then
              echo "Application is up!";
              exit 0;
            else
              echo "Waiting for application to start... ($i/30)";
              sleep 10;
            fi
          done
          echo "Application did not start in time.";
          exit 1;

      - name: Run OWASP ZAP Scanner
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: 'http://localhost:${{ inputs.port }}'
          fail_action: false
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          allow_issue_writing: false
          artifact_name: 'ZAP Scanner report'
